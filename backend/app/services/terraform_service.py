"""
Terraform service for processing and formatting Terraform code.

This module provides functionality to process and format Terraform code
generated by the AI model.
"""

import re
from typing import Optional


class TerraformService:
    """Service for processing and formatting Terraform code."""
    
    def process_terraform(self, terraform_code: str, service_type: str) -> str:
        """
        Process and enhance the Terraform code.
        
        Args:
            terraform_code: The raw Terraform code from the AI
            service_type: The type of service (e.g. 's3')
            
        Returns:
            Processed Terraform code
        """
        # Ensure the terraform block is present
        if "terraform {" not in terraform_code:
            terraform_block = """
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.16"
    }
  }
  required_version = ">= 1.2.0"
}
"""
            terraform_code = terraform_block + "\n" + terraform_code
        
        # Add provider block if missing
        if "provider \"aws\"" not in terraform_code:
            provider_block = """
provider "aws" {
  region = var.region
}
"""
            terraform_code = terraform_code + "\n" + provider_block
        
        # Add variables block if missing
        if service_type == "s3" and "variable" not in terraform_code:
            variables_block = """
variable "region" {
  description = "The AWS region to deploy resources"
  type        = string
}

variable "bucket_name" {
  description = "The name of the S3 bucket"
  type        = string
}
"""
            terraform_code = terraform_code + "\n" + variables_block
        
        # Add outputs if missing
        if "output" not in terraform_code and service_type == "s3":
            outputs_block = """
output "bucket_id" {
  description = "The ID of the S3 bucket"
  value       = aws_s3_bucket.main.id
}

output "bucket_arn" {
  description = "The ARN of the S3 bucket"
  value       = aws_s3_bucket.main.arn
}
"""
            terraform_code = terraform_code + "\n" + outputs_block
        
        # Add tags to resources if missing
        terraform_code = self._add_tags_to_resources(terraform_code, service_type)
        
        return terraform_code
    
    def _add_tags_to_resources(self, terraform_code: str, service_type: str) -> str:
        """Add tags to AWS resources if they don't have tags."""
        # Regular expression to match resource blocks without tags
        resource_pattern = r'(resource\s+"([^"]+)"\s+"([^"]+)"\s+{(?:(?!tags).)*?})(\s*\n|\s*$)'
        
        # Tags to add
        default_tags = """
  tags = {
    Name        = var.%s
    Environment = "production"
    ManagedBy   = "terraform"
    Security    = "high"
    CreatedBy   = "secure-iac"
  }
"""
        
        # Add tags based on service type
        if service_type == "s3":
            var_name = "bucket_name"
        else:
            var_name = "name"
        
        # Replace resource blocks with tagged versions
        def add_tags(match):
            resource_type = match.group(2)
            # Only add tags to AWS resources
            if resource_type.startswith("aws_"):
                resource_block = match.group(1)
                # Check if the resource block doesn't already end with a newline
                if not resource_block.endswith("\n"):
                    resource_block += "\n"
                return resource_block + default_tags % var_name + match.group(4)
            return match.group(0)
        
        return re.sub(resource_pattern, add_tags, terraform_code, flags=re.DOTALL)